% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/save.R
\name{saving-loading}
\alias{saving-loading}
\alias{save_ktest}
\alias{load_ktest}
\title{Saving and loading \code{ktest} results}
\usage{
save_ktest(obj, filename, compress = TRUE)

load_ktest(filename, compressed = TRUE)
}
\arguments{
\item{obj}{a \code{Ktest} object to be saved.}

\item{filename}{string, name of the file to save input object or to load
from.}

\item{compress}{boolean flag to enable/disable compression when saving Ktest
object to disk.}

\item{compressed}{boolean flag to enable/disable decompression when loading
Ktest object from disk.}
}
\value{
no return

the loaded object that was saved in \code{filename} file.
}
\description{
Save a computed \code{Ktest} objects or a list of computed \code{Ktest} objects
into a binary file, and load it back into R.
}
\details{
Since \code{ktest} R package is basically a wrapper around the \code{ktest} Python
package, we manipulate Python objects directly in R:

\if{html}{\out{<div class="sourceCode r">}}\preformatted{class(kt_1)
## [1] "ktest.tester.Ktest"   "ktest.kernel_statistics.Statistics"
## [3] "python.builtin.object"
}\if{html}{\out{</div>}}

Such type of objects cannot be saved and loaded using the standard
\code{\link[base:save]{base::save()}} and \code{\link[base:load]{base::load()}} functions in R.

To overcome this issue, the \code{save_ktest()} and \code{load_ktest()} functions
are wrapper around Python \code{Ktest} object \code{save()} and \code{load()} methods,
using a particular pickling (a.k.a. serializing) framework
(provided by the \code{dill} Python package).

Note: \code{.pkl} or \code{.pickle} file extensions are considered the "standard"
extension for such file storing serialized Python objects but you may use
any extension that suits you.

When enabling compression, the input object will be saved under the
following filename \verb{<filename>.gz} since Gzip compression is used
internally.
}
\examples{
\dontrun{
# data loading
tmp <- load_example_data()
# gene expression data table (344 cells and 83 genes)
data_tab <- tmp$data_tab
# metadata table with sampling conditions (for the 344 cells)
metadata_tab <- tmp$metadata_tab

# create Ktest object
kt_1 = ktest_init(
    data = data_tab, metadata = metadata_tab, 
    sample_names = c('0H', '48HREV')
)
# save test result
save_ktest(kt_1, filename = "kt_1.pkl", compress=TRUE)
# load test result
kt_1 <- load_ktest(filename = "kt_1.pkl.gz", compressed=TRUE)
}
}
\author{
Ghislain Durif
}
